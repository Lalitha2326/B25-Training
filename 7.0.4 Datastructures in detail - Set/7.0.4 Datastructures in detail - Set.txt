Set:
====

  I. Introduction
 II. Built-in methods for Sets(17)
III. Set Comprehensions

***************************************************************************************************
I. Introduction:
----------------
    - Sets are mutable data structures.
    - Sets store unique elements
    - Sets are unordered collections.(No indexing and No Slicing)
    - Sets holds only immutable datatypes.
    - Sets can contain both homogeneous and heterogeneous immutable datatypes.
    - Sets are represented using curly brackets - {}.
    
        - Checking Membership (in)
        - len()
        - min()
        - max()

    Note:
    ----- 
    Empty set - set() or set({})

***************************************************************************************************
 II. Built-in methods for Sets(17):
 ----------------------------------

    # 1. add: Add an element to the end of the set
    ----------------------------------------------
    my_set = {1, 2, 3}
    my_set.add(4)
    print(my_set)  # Output: {1, 2, 3, 4}

    # 2. clear: Remove all elements from the set
    --------------------------------------------
    my_set.clear()
    print(my_set)  # Output: set()

    # 3. copy: Create a shallow copy of the set
    -------------------------------------------
    original_set = {1, 2, 3}
    copied_set = original_set.copy()
    print(copied_set)  # Output: {1, 2, 3}

    # 4. difference: Get the set of elements in the first set but not in the second set
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    result_set = set1.difference(set2)
    print(result_set)  # Output: {1, 2}

    # 5. difference_update: Remove elements from the set that are in another set
    ----------------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    set1.difference_update(set2)
    print(set1)  # Output: {1, 2}

    # 6. discard: Remove an element from the set if it is present
    -------------------------------------------------------------
    my_set = {1, 2, 3}
    my_set.discard(2)
    print(my_set)  # Output: {1, 3}

    # 7. intersection: Get the set of common elements between two sets
    ------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    result_set = set1.intersection(set2)
    print(result_set)  # Output: {3, 4}

    # 8. intersection_update: Update the set with the intersection of itself and another set
    ----------------------------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    set1.intersection_update(set2)
    print(set1)  # Output: {3, 4}

    # 9. isdisjoint: Check if two sets have no elements in common
    -------------------------------------------------------------
    set1 = {1, 2, 3}
    set2 = {4, 5, 6}
    is_disjoint = set1.isdisjoint(set2)
    print(is_disjoint)  # Output: True

    # 10. issubset: Check if every element in the set is in another set
    --------------------------------------------------------------------
    set1 = {1, 2}
    set2 = {1, 2, 3, 4}
    is_subset = set1.issubset(set2)
    print(is_subset)  # Output: True

    # 11. issuperset: Check if every element in another set is in the set
    ---------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {1, 2}
    is_superset = set1.issuperset(set2)
    print(is_superset)  # Output: True

    # 12. pop: Remove and return an arbitrary element from the set
    --------------------------------------------------------------
    my_set = {1, 2, 3}
    popped_element = my_set.pop()
    print(popped_element, my_set)  # Output: 1 {2, 3}

    # 13. remove: Remove a specified element from the set
    -----------------------------------------------------
    my_set = {1, 2, 3}
    my_set.remove(2)
    print(my_set)  # Output: {1, 3}

    # 14. symmetric_difference: Get the set of elements in either set, but not both
    -------------------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    result_set = set1.symmetric_difference(set2)
    print(result_set)  # Output: {1, 2, 5, 6}

    # 15. symmetric_difference_update: Update the set with the symmetric difference of itself and another set
    ----------------------------------------------------------------------------------------------------------
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}
    set1.symmetric_difference_update(set2)
    print(set1)  # Output: {1, 2, 5, 6}

    # 16. union: Get the set of all elements in either set
    ------------------------------------------------------
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    result_set = set1.union(set2)
    print(result_set)  # Output: {1, 2, 3, 4, 5}

    # 17. update: Update the set with elements from another set or iterable
    -----------------------------------------------------------------------
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    set1.update(set2)
    print(set1)  # Output: {1, 2, 3, 4, 5}

  Convert various data types or data structures into set:
  -------------------------------------------------------
        --- set() ---

***************************************************************************************************
III. Set Comprehensions:
------------------------

		- Set comprehensions create sets using a similar syntax.

			syntax - {expression for item in iterable if condition}

		- expression : The operation to perform on each item.
		- item       : The variable representing each element in the iterable.
		- iterable   : The iterable you are iterating over (e.g., a list, tuple, or string).
		- condition  : An optional condition to filter the elements.

		Example:
		--------
		# Creating a set of squares using set comprehension
		squares_set = {x**2 for x in range(5)}
		print(squares_set) 
